/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ApiUi {
    }
    interface ContentComponent {
    }
    interface CropTool {
        "AspectRatio": number;
        "ImagePosition": any;
        "MaxWidth": number;
        "TargetId": number;
        "imageFile": File;
        "url": string;
    }
    interface EditorVisualCheck {
    }
    interface HomepageMenuEditorComponent {
    }
    interface LayoutOverlay {
        "closeIcon": string;
        "isopen": boolean;
    }
    interface MenuEditorComponent {
        "toggle": boolean;
    }
    interface ModalOvelay {
        "AspectRatio": number;
        "ImagePosition": string;
        "MaxWidth": number;
        "RenderType": string;
        "TargetId": number;
        "buttonClass": string;
        "buttonValue": string;
        "url": string;
    }
    interface SelectorComponent {
        "DisplayName": string;
        "DropDownvalues": string[];
        "IconName": string;
        "element": string;
        "type": string;
        "value": string;
    }
    interface ToolbarComponent {
    }
    interface UploadImageButton {
        "URL": string;
        "buttonvalue": string;
    }
}
declare global {
    interface HTMLApiUiElement extends Components.ApiUi, HTMLStencilElement {
    }
    var HTMLApiUiElement: {
        prototype: HTMLApiUiElement;
        new (): HTMLApiUiElement;
    };
    interface HTMLContentComponentElement extends Components.ContentComponent, HTMLStencilElement {
    }
    var HTMLContentComponentElement: {
        prototype: HTMLContentComponentElement;
        new (): HTMLContentComponentElement;
    };
    interface HTMLCropToolElement extends Components.CropTool, HTMLStencilElement {
    }
    var HTMLCropToolElement: {
        prototype: HTMLCropToolElement;
        new (): HTMLCropToolElement;
    };
    interface HTMLEditorVisualCheckElement extends Components.EditorVisualCheck, HTMLStencilElement {
    }
    var HTMLEditorVisualCheckElement: {
        prototype: HTMLEditorVisualCheckElement;
        new (): HTMLEditorVisualCheckElement;
    };
    interface HTMLHomepageMenuEditorComponentElement extends Components.HomepageMenuEditorComponent, HTMLStencilElement {
    }
    var HTMLHomepageMenuEditorComponentElement: {
        prototype: HTMLHomepageMenuEditorComponentElement;
        new (): HTMLHomepageMenuEditorComponentElement;
    };
    interface HTMLLayoutOverlayElement extends Components.LayoutOverlay, HTMLStencilElement {
    }
    var HTMLLayoutOverlayElement: {
        prototype: HTMLLayoutOverlayElement;
        new (): HTMLLayoutOverlayElement;
    };
    interface HTMLMenuEditorComponentElement extends Components.MenuEditorComponent, HTMLStencilElement {
    }
    var HTMLMenuEditorComponentElement: {
        prototype: HTMLMenuEditorComponentElement;
        new (): HTMLMenuEditorComponentElement;
    };
    interface HTMLModalOvelayElement extends Components.ModalOvelay, HTMLStencilElement {
    }
    var HTMLModalOvelayElement: {
        prototype: HTMLModalOvelayElement;
        new (): HTMLModalOvelayElement;
    };
    interface HTMLSelectorComponentElement extends Components.SelectorComponent, HTMLStencilElement {
    }
    var HTMLSelectorComponentElement: {
        prototype: HTMLSelectorComponentElement;
        new (): HTMLSelectorComponentElement;
    };
    interface HTMLToolbarComponentElement extends Components.ToolbarComponent, HTMLStencilElement {
    }
    var HTMLToolbarComponentElement: {
        prototype: HTMLToolbarComponentElement;
        new (): HTMLToolbarComponentElement;
    };
    interface HTMLUploadImageButtonElement extends Components.UploadImageButton, HTMLStencilElement {
    }
    var HTMLUploadImageButtonElement: {
        prototype: HTMLUploadImageButtonElement;
        new (): HTMLUploadImageButtonElement;
    };
    interface HTMLElementTagNameMap {
        "api-ui": HTMLApiUiElement;
        "content-component": HTMLContentComponentElement;
        "crop-tool": HTMLCropToolElement;
        "editor-visual-check": HTMLEditorVisualCheckElement;
        "homepage-menu-editor-component": HTMLHomepageMenuEditorComponentElement;
        "layout-overlay": HTMLLayoutOverlayElement;
        "menu-editor-component": HTMLMenuEditorComponentElement;
        "modal-ovelay": HTMLModalOvelayElement;
        "selector-component": HTMLSelectorComponentElement;
        "toolbar-component": HTMLToolbarComponentElement;
        "upload-image-button": HTMLUploadImageButtonElement;
    }
}
declare namespace LocalJSX {
    interface ApiUi {
    }
    interface ContentComponent {
    }
    interface CropTool {
        "AspectRatio"?: number;
        "ImagePosition"?: any;
        "MaxWidth"?: number;
        "TargetId"?: number;
        "imageFile"?: File;
        "url"?: string;
    }
    interface EditorVisualCheck {
    }
    interface HomepageMenuEditorComponent {
    }
    interface LayoutOverlay {
        "closeIcon"?: string;
        "isopen"?: boolean;
    }
    interface MenuEditorComponent {
        "toggle"?: boolean;
    }
    interface ModalOvelay {
        "AspectRatio"?: number;
        "ImagePosition"?: string;
        "MaxWidth"?: number;
        "RenderType"?: string;
        "TargetId"?: number;
        "buttonClass"?: string;
        "buttonValue"?: string;
        "url"?: string;
    }
    interface SelectorComponent {
        "DisplayName"?: string;
        "DropDownvalues"?: string[];
        "IconName"?: string;
        "element"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface ToolbarComponent {
    }
    interface UploadImageButton {
        "URL"?: string;
        "buttonvalue"?: string;
    }
    interface IntrinsicElements {
        "api-ui": ApiUi;
        "content-component": ContentComponent;
        "crop-tool": CropTool;
        "editor-visual-check": EditorVisualCheck;
        "homepage-menu-editor-component": HomepageMenuEditorComponent;
        "layout-overlay": LayoutOverlay;
        "menu-editor-component": MenuEditorComponent;
        "modal-ovelay": ModalOvelay;
        "selector-component": SelectorComponent;
        "toolbar-component": ToolbarComponent;
        "upload-image-button": UploadImageButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "api-ui": LocalJSX.ApiUi & JSXBase.HTMLAttributes<HTMLApiUiElement>;
            "content-component": LocalJSX.ContentComponent & JSXBase.HTMLAttributes<HTMLContentComponentElement>;
            "crop-tool": LocalJSX.CropTool & JSXBase.HTMLAttributes<HTMLCropToolElement>;
            "editor-visual-check": LocalJSX.EditorVisualCheck & JSXBase.HTMLAttributes<HTMLEditorVisualCheckElement>;
            "homepage-menu-editor-component": LocalJSX.HomepageMenuEditorComponent & JSXBase.HTMLAttributes<HTMLHomepageMenuEditorComponentElement>;
            "layout-overlay": LocalJSX.LayoutOverlay & JSXBase.HTMLAttributes<HTMLLayoutOverlayElement>;
            "menu-editor-component": LocalJSX.MenuEditorComponent & JSXBase.HTMLAttributes<HTMLMenuEditorComponentElement>;
            "modal-ovelay": LocalJSX.ModalOvelay & JSXBase.HTMLAttributes<HTMLModalOvelayElement>;
            "selector-component": LocalJSX.SelectorComponent & JSXBase.HTMLAttributes<HTMLSelectorComponentElement>;
            "toolbar-component": LocalJSX.ToolbarComponent & JSXBase.HTMLAttributes<HTMLToolbarComponentElement>;
            "upload-image-button": LocalJSX.UploadImageButton & JSXBase.HTMLAttributes<HTMLUploadImageButtonElement>;
        }
    }
}
